# this is the version of YAML we are using with the Kubernetes API
apiVersion: apps/v1
# The kind is the type of Kubernetes resouce we are using
# A deployment is when we run code on a server
kind: Deployment
metadata:
# The name here is the name of our deployment
  name: stedi-levi-live
spec:
# Replicas refers to the number of pods we deploy
  replicas: 1
# A selector is a route to my pod
  selector:
# Matchlabels are a label for my selector
    matchLabels:
# App is a specific kind of label for my pod
      app: stedi-levi-live
# The template describes all the feature of my pod
  template:
# The metadata provides labels for my template
    metadata:
      labels:
        app: stedi-levi-live
# The spec refers to the specifications of my containers in my pod
    spec:
# Containers can have one or more Docker containers in the pod
      containers:
# The name of the container is specified below
        - name: stedi-levi-live
# The image is a prebuilt file containing the operating system
          image: gcr.io/group-project-cloud-account/stedi-levi
          env:
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: redis-secret-live-levi
                  key: REDIS_PASS
            - name: REDIS_HOST
              value: "redis-stedi-live-levi"
            - name: REDIS_PORT
              value: "6379"
            - name: REDIS_DB
              value: "0"
# The ports is a list of tcp ports the pod listens on
          ports:
# The container port is a specific port the pod listens on
            - containerPort: 4567
# Resources are the compute resources used by the pod in the cloud
          resources:
# Limits represent the max amount of CPU that can be used by the pod
            limits:
# CPU is the max amount of CPU tha can be used by the pod
              cpu: ".15"
# Memory is the max memory used
              memory: "500Mi"
# Request is the minimum amount of compute resouces used my the pod
            requests:
# Minimum cpu pod needs to run
              cpu: ".1"
# Same but for memory
              memory: "250Mi"
# LivenessProbe is a configuration that checcks the pod for health
          livenessProbe:
# HttpGet instructs kubernetes to do an HTTP request to check health
            httpGet:
# Path defines the url to use when doing HTTP request
              path: /
# Port defines the port to use when doing the HTTP request
              port: 80
# initialDelaySeconds tells Kubernnetes to wait before doing a request
            initialDelaySeconds: 30
# periodSeconds tells Kubernetes how often to check health
            periodSeconds: 30
---
#Ingress/Managed Certificates start
apiVersion: networking.gke.io/v1
kind: ManagedCertificate
metadata:
  name: stedi-certificate-levi
spec:
  domains:
    - www.levi.cit262.com
    - levi.cit262.com
---
apiVersion: v1
kind: Service
metadata:
  name: stedi-nodeport-levi
spec:
  selector:
    app: stedi-levi-live
  type: NodePort
  ports:
    - protocol: TCP
      port: 80
      targetPort: 4567
---
  apiVersion: networking.k8s.io/v1
  kind: Ingress
  metadata:
    name: stedi-ingress-levi-live
    annotations:
      kubernetes.io/ingress.global-static-ip-name: stedi-public-levi-live
      networking.gke.io/managed-certificates: stedi-certificate-levi-live
      kubernetes.io/ingress.allow-http: "false"
      kubernetes.io/ingress.class: "gce"
  spec:
    rules:
      - http:
          paths:
          - path: /live
            pathType: ImplementationSpecific
            backend:
              service:
                name: stedi-nodeport-levi-live
                port:
                  number: 80
          - path: /discounted
            pathType: ImplementationSpecific
            backend:
              service:
                name: my-discounted-products
                port:
                  number: 80
    # defaultBackend:
    #   service:
    #     name: stedi-nodeport-levi-live
    #     port:
    #       number: 80